{"ast":null,"code":"import Web3 from \"web3\";\n\nconst initWeb3 = () => {\n  return new Promise(async (resolve, reject) => {\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n\n      try {\n        await window.ethereum.enable();\n        resolve(web3);\n      } catch (error) {\n        // console.log(error)\n        reject(error);\n      }\n    } else if (window.web3) {\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    } else {// const provider = new Web3.providers.HttpProvider(\"http://localhost:9545\");\n      // const web3 = new Web3(provider);\n      // console.log(\"No web3 instance injected, using Local web3.\");\n      // resolve(web3);\n    }\n  });\n};\n\nexport { initWeb3 };","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/back/src/utils.js"],"names":["Web3","initWeb3","Promise","resolve","reject","window","ethereum","web3","enable","error","console","log"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,SAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,QAAIC,MAAM,CAACC,QAAX,EAAqB;AACnB,YAAMC,IAAI,GAAG,IAAIP,IAAJ,CAASK,MAAM,CAACC,QAAhB,CAAb;;AACA,UAAI;AACF,cAAMD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,EAAN;AACAL,QAAAA,OAAO,CAACI,IAAD,CAAP;AACD,OAHD,CAGE,OAAOE,KAAP,EAAc;AACd;AACAL,QAAAA,MAAM,CAACK,KAAD,CAAN;AACD;AACF,KATD,MASO,IAAIJ,MAAM,CAACE,IAAX,EAAiB;AACtB,YAAMA,IAAI,GAAGF,MAAM,CAACE,IAApB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAR,MAAAA,OAAO,CAACI,IAAD,CAAP;AACD,KAJM,MAIA,CACL;AACA;AACA;AACA;AACD;AACF,GApBM,CAAP;AAqBD,CAtBD;;AAwBA,SAASN,QAAT","sourcesContent":["import Web3 from \"web3\";\n\nconst initWeb3 = () => {\n  return new Promise(async (resolve, reject) => {\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n      try {\n        await window.ethereum.enable();\n        resolve(web3);\n      } catch (error) {\n        // console.log(error)\n        reject(error);\n      }\n    } else if (window.web3) {\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    } else {\n      // const provider = new Web3.providers.HttpProvider(\"http://localhost:9545\");\n      // const web3 = new Web3(provider);\n      // console.log(\"No web3 instance injected, using Local web3.\");\n      // resolve(web3);\n    }\n  });\n};\n\nexport { initWeb3 };\n"]},"metadata":{},"sourceType":"module"}